/* Enclave.edl - Top EDL file. */

enclave {
    

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file. 
     *  [import]: specifies the functions to import, 
     *  [*]: implies to import all functions.
     */
      
    from "sgx_tstdc.edl" import *;
    trusted {
        /*Priority Queue Tools*/

        public int ecall_Enqueue(int silo_id, int silo_beg_idx, int num,
                                [in, count=16] const uint8_t* aes_key, [in, count=16] const uint8_t* aes_iv,
                                [in, count=data_size] const unsigned char* encrypt_data, size_t data_size);

        public void ecall_OblivQueueHead([out, count=1] int* idx, [out, count=1] int* silo_id);

        public void ecall_OblivFreeQueue(void);

        public int ecall_GetSiloIndex(int silo_id);

        public int ecall_GetDataIndex(int data_id);

        public void ecall_OblivInitQueue(int queue_size);
        
        public void ecall_OblivCreateQueue(int queue_size);

        public void ecall_OblivDequeue(void);

        public void ecall_OblivDequeueMore(int num);

        /* information from one silo per time */
        public void ecall_ClearInformation(size_t silo_id);

        public int ecall_ImportInformation(size_t silo_id, int importType, size_t data_size, size_t query_k,
                                          [in, count=16] const uint8_t* aes_key, [in, count=16] const uint8_t* aes_iv,
                                          [in, count=data_size] const unsigned char* encrypt_data);

        /* contribution pre-estimation */
        public void ecall_JointEstimation(size_t silo_num, size_t k);

        public int ecall_GetPrunedK(size_t silo_id, size_t max_output_size, 
                                   [in, count=16] const uint8_t* aes_key, [in, count=16] const uint8_t* aes_iv,
                                   [out, count=max_output_size] unsigned char* encrypt_k);
        
        /* phase I */
        public void ecall_CandRefinement(size_t silo_num, size_t k);

        public void ecall_CandRefinementBase(size_t silo_num, size_t k);

        public int ecall_GetThres(size_t silo_id, size_t max_output_size,
                                 [in, count=16] const uint8_t* aes_key, [in, count=16] const uint8_t* aes_iv,
                                 [out, count=max_output_size] unsigned char* encrypt_thres);

        /* phase II */
        public void ecall_TopkSelection(size_t silo_num, size_t k);

        public int ecall_GetK(size_t silo_id);
    };

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
    };

};
