// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: UserBroker.proto

#include "UserBroker.pb.h"
#include "UserBroker.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace userbroker {

static const char* UserBroker_method_names[] = {
  "/userbroker.UserBroker/requestKNN",
  "/userbroker.UserBroker/requestComm",
};

std::unique_ptr< UserBroker::Stub> UserBroker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserBroker::Stub> stub(new UserBroker::Stub(channel, options));
  return stub;
}

UserBroker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_requestKNN_(UserBroker_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_requestComm_(UserBroker_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserBroker::Stub::requestKNN(::grpc::ClientContext* context, const ::userbroker::knnQuery& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::userbroker::knnQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_requestKNN_, context, request, response);
}

void UserBroker::Stub::async::requestKNN(::grpc::ClientContext* context, const ::userbroker::knnQuery* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::userbroker::knnQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_requestKNN_, context, request, response, std::move(f));
}

void UserBroker::Stub::async::requestKNN(::grpc::ClientContext* context, const ::userbroker::knnQuery* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_requestKNN_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserBroker::Stub::PrepareAsyncrequestKNNRaw(::grpc::ClientContext* context, const ::userbroker::knnQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::userbroker::knnQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_requestKNN_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* UserBroker::Stub::AsyncrequestKNNRaw(::grpc::ClientContext* context, const ::userbroker::knnQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrequestKNNRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UserBroker::Stub::requestComm(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::userbroker::rpcComm* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::userbroker::rpcComm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_requestComm_, context, request, response);
}

void UserBroker::Stub::async::requestComm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::userbroker::rpcComm* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::userbroker::rpcComm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_requestComm_, context, request, response, std::move(f));
}

void UserBroker::Stub::async::requestComm(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::userbroker::rpcComm* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_requestComm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::userbroker::rpcComm>* UserBroker::Stub::PrepareAsyncrequestCommRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::userbroker::rpcComm, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_requestComm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::userbroker::rpcComm>* UserBroker::Stub::AsyncrequestCommRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrequestCommRaw(context, request, cq);
  result->StartCall();
  return result;
}

UserBroker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserBroker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserBroker::Service, ::userbroker::knnQuery, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserBroker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::userbroker::knnQuery* req,
             ::google::protobuf::Empty* resp) {
               return service->requestKNN(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserBroker_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserBroker::Service, ::google::protobuf::Empty, ::userbroker::rpcComm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UserBroker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::userbroker::rpcComm* resp) {
               return service->requestComm(ctx, req, resp);
             }, this)));
}

UserBroker::Service::~Service() {
}

::grpc::Status UserBroker::Service::requestKNN(::grpc::ServerContext* context, const ::userbroker::knnQuery* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserBroker::Service::requestComm(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::userbroker::rpcComm* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace userbroker

