// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: BrokerSilo.proto
#ifndef GRPC_BrokerSilo_2eproto__INCLUDED
#define GRPC_BrokerSilo_2eproto__INCLUDED

#include "BrokerSilo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace brokersilo {

class BrokerSilo final {
 public:
  static constexpr char const* service_full_name() {
    return "brokersilo.BrokerSilo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 获取Diffie-Hellman密钥交换的参数 
    virtual ::grpc::Status GetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::brokersilo::DiffieHellmanParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanParams>> AsyncGetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanParams>>(AsyncGetParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanParams>> PrepareAsyncGetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanParams>>(PrepareAsyncGetParamsRaw(context, request, cq));
    }
    // 获取Diffie-Hellman密钥交换的随机数r^g%p的结果
    virtual ::grpc::Status GetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::brokersilo::DiffieHellmanRg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanRg>> AsyncGetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanRg>>(AsyncGetRandomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanRg>> PrepareAsyncGetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanRg>>(PrepareAsyncGetRandomRaw(context, request, cq));
    }
    // send knn query, evaluate the local k_i
    virtual ::grpc::Status evaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::brokersilo::EncryptData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>> AsyncevaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>>(AsyncevaluateKRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>> PrepareAsyncevaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>>(PrepareAsyncevaluateKRaw(context, request, cq));
    }
    // send limit k, return interval info
    virtual ::grpc::Status requestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::brokersilo::EncryptData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>> AsyncrequestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>>(AsyncrequestIntervalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>> PrepareAsyncrequestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>>(PrepareAsyncrequestIntervalRaw(context, request, cq));
    }
    // send max range, return (dis, silo id)
    virtual ::grpc::Status sendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::brokersilo::EncryptData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>> AsyncsendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>>(AsyncsendRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>> PrepareAsyncsendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>>(PrepareAsyncsendRangeRaw(context, request, cq));
    }
    // send number
    virtual ::grpc::Status sendNumber(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncsendNumber(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncsendNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncsendNumber(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncsendNumberRaw(context, request, cq));
    }
    // send answers to user
    std::unique_ptr< ::grpc::ClientReaderInterface< ::brokersilo::Vector>> getAns(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::brokersilo::Vector>>(getAnsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::brokersilo::Vector>> AsyncgetAns(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::brokersilo::Vector>>(AsyncgetAnsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::brokersilo::Vector>> PrepareAsyncgetAns(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::brokersilo::Vector>>(PrepareAsyncgetAnsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 获取Diffie-Hellman密钥交换的参数 
      virtual void GetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::brokersilo::DiffieHellmanParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::brokersilo::DiffieHellmanParams* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 获取Diffie-Hellman密钥交换的随机数r^g%p的结果
      virtual void GetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg* request, ::brokersilo::DiffieHellmanRg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg* request, ::brokersilo::DiffieHellmanRg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // send knn query, evaluate the local k_i
      virtual void evaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery* request, ::brokersilo::EncryptData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void evaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery* request, ::brokersilo::EncryptData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // send limit k, return interval info
      virtual void requestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void requestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // send max range, return (dis, silo id)
      virtual void sendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // send number
      virtual void sendNumber(::grpc::ClientContext* context, const ::brokersilo::Number* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void sendNumber(::grpc::ClientContext* context, const ::brokersilo::Number* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // send answers to user
      virtual void getAns(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::brokersilo::Vector>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanParams>* AsyncGetParamsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanParams>* PrepareAsyncGetParamsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanRg>* AsyncGetRandomRaw(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::DiffieHellmanRg>* PrepareAsyncGetRandomRaw(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>* AsyncevaluateKRaw(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>* PrepareAsyncevaluateKRaw(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>* AsyncrequestIntervalRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>* PrepareAsyncrequestIntervalRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>* AsyncsendRangeRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::brokersilo::EncryptData>* PrepareAsyncsendRangeRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncsendNumberRaw(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncsendNumberRaw(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::brokersilo::Vector>* getAnsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::brokersilo::Vector>* AsyncgetAnsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::brokersilo::Vector>* PrepareAsyncgetAnsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::brokersilo::DiffieHellmanParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanParams>> AsyncGetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanParams>>(AsyncGetParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanParams>> PrepareAsyncGetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanParams>>(PrepareAsyncGetParamsRaw(context, request, cq));
    }
    ::grpc::Status GetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::brokersilo::DiffieHellmanRg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanRg>> AsyncGetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanRg>>(AsyncGetRandomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanRg>> PrepareAsyncGetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanRg>>(PrepareAsyncGetRandomRaw(context, request, cq));
    }
    ::grpc::Status evaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::brokersilo::EncryptData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>> AsyncevaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>>(AsyncevaluateKRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>> PrepareAsyncevaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>>(PrepareAsyncevaluateKRaw(context, request, cq));
    }
    ::grpc::Status requestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::brokersilo::EncryptData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>> AsyncrequestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>>(AsyncrequestIntervalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>> PrepareAsyncrequestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>>(PrepareAsyncrequestIntervalRaw(context, request, cq));
    }
    ::grpc::Status sendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::brokersilo::EncryptData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>> AsyncsendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>>(AsyncsendRangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>> PrepareAsyncsendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>>(PrepareAsyncsendRangeRaw(context, request, cq));
    }
    ::grpc::Status sendNumber(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncsendNumber(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncsendNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncsendNumber(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncsendNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::brokersilo::Vector>> getAns(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::brokersilo::Vector>>(getAnsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::brokersilo::Vector>> AsyncgetAns(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::brokersilo::Vector>>(AsyncgetAnsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::brokersilo::Vector>> PrepareAsyncgetAns(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::brokersilo::Vector>>(PrepareAsyncgetAnsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::brokersilo::DiffieHellmanParams* response, std::function<void(::grpc::Status)>) override;
      void GetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::brokersilo::DiffieHellmanParams* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg* request, ::brokersilo::DiffieHellmanRg* response, std::function<void(::grpc::Status)>) override;
      void GetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg* request, ::brokersilo::DiffieHellmanRg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void evaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery* request, ::brokersilo::EncryptData* response, std::function<void(::grpc::Status)>) override;
      void evaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery* request, ::brokersilo::EncryptData* response, ::grpc::ClientUnaryReactor* reactor) override;
      void requestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, std::function<void(::grpc::Status)>) override;
      void requestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, std::function<void(::grpc::Status)>) override;
      void sendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, ::grpc::ClientUnaryReactor* reactor) override;
      void sendNumber(::grpc::ClientContext* context, const ::brokersilo::Number* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void sendNumber(::grpc::ClientContext* context, const ::brokersilo::Number* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getAns(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::brokersilo::Vector>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanParams>* AsyncGetParamsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanParams>* PrepareAsyncGetParamsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanRg>* AsyncGetRandomRaw(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanRg>* PrepareAsyncGetRandomRaw(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* AsyncevaluateKRaw(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* PrepareAsyncevaluateKRaw(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* AsyncrequestIntervalRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* PrepareAsyncrequestIntervalRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* AsyncsendRangeRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* PrepareAsyncsendRangeRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncsendNumberRaw(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncsendNumberRaw(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::brokersilo::Vector>* getAnsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) override;
    ::grpc::ClientAsyncReader< ::brokersilo::Vector>* AsyncgetAnsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::brokersilo::Vector>* PrepareAsyncgetAnsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetParams_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRandom_;
    const ::grpc::internal::RpcMethod rpcmethod_evaluateK_;
    const ::grpc::internal::RpcMethod rpcmethod_requestInterval_;
    const ::grpc::internal::RpcMethod rpcmethod_sendRange_;
    const ::grpc::internal::RpcMethod rpcmethod_sendNumber_;
    const ::grpc::internal::RpcMethod rpcmethod_getAns_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 获取Diffie-Hellman密钥交换的参数 
    virtual ::grpc::Status GetParams(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::brokersilo::DiffieHellmanParams* response);
    // 获取Diffie-Hellman密钥交换的随机数r^g%p的结果
    virtual ::grpc::Status GetRandom(::grpc::ServerContext* context, const ::brokersilo::DiffieHellmanRg* request, ::brokersilo::DiffieHellmanRg* response);
    // send knn query, evaluate the local k_i
    virtual ::grpc::Status evaluateK(::grpc::ServerContext* context, const ::brokersilo::knnQuery* request, ::brokersilo::EncryptData* response);
    // send limit k, return interval info
    virtual ::grpc::Status requestInterval(::grpc::ServerContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response);
    // send max range, return (dis, silo id)
    virtual ::grpc::Status sendRange(::grpc::ServerContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response);
    // send number
    virtual ::grpc::Status sendNumber(::grpc::ServerContext* context, const ::brokersilo::Number* request, ::google::protobuf::Empty* response);
    // send answers to user
    virtual ::grpc::Status getAns(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::brokersilo::Vector>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetParams() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParams(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::brokersilo::DiffieHellmanParams* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetParams(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::brokersilo::DiffieHellmanParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRandom() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRandom(::grpc::ServerContext* /*context*/, const ::brokersilo::DiffieHellmanRg* /*request*/, ::brokersilo::DiffieHellmanRg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRandom(::grpc::ServerContext* context, ::brokersilo::DiffieHellmanRg* request, ::grpc::ServerAsyncResponseWriter< ::brokersilo::DiffieHellmanRg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_evaluateK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_evaluateK() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_evaluateK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status evaluateK(::grpc::ServerContext* /*context*/, const ::brokersilo::knnQuery* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestevaluateK(::grpc::ServerContext* context, ::brokersilo::knnQuery* request, ::grpc::ServerAsyncResponseWriter< ::brokersilo::EncryptData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_requestInterval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_requestInterval() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_requestInterval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestInterval(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestInterval(::grpc::ServerContext* context, ::brokersilo::EncryptData* request, ::grpc::ServerAsyncResponseWriter< ::brokersilo::EncryptData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendRange() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_sendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRange(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRange(::grpc::ServerContext* context, ::brokersilo::EncryptData* request, ::grpc::ServerAsyncResponseWriter< ::brokersilo::EncryptData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_sendNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_sendNumber() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_sendNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendNumber(::grpc::ServerContext* /*context*/, const ::brokersilo::Number* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendNumber(::grpc::ServerContext* context, ::brokersilo::Number* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getAns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getAns() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_getAns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAns(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::brokersilo::Vector>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAns(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncWriter< ::brokersilo::Vector>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetParams<WithAsyncMethod_GetRandom<WithAsyncMethod_evaluateK<WithAsyncMethod_requestInterval<WithAsyncMethod_sendRange<WithAsyncMethod_sendNumber<WithAsyncMethod_getAns<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetParams() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::brokersilo::DiffieHellmanParams>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::brokersilo::DiffieHellmanParams* response) { return this->GetParams(context, request, response); }));}
    void SetMessageAllocatorFor_GetParams(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::brokersilo::DiffieHellmanParams>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::brokersilo::DiffieHellmanParams>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParams(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::brokersilo::DiffieHellmanParams* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetParams(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::brokersilo::DiffieHellmanParams* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRandom() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::brokersilo::DiffieHellmanRg, ::brokersilo::DiffieHellmanRg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brokersilo::DiffieHellmanRg* request, ::brokersilo::DiffieHellmanRg* response) { return this->GetRandom(context, request, response); }));}
    void SetMessageAllocatorFor_GetRandom(
        ::grpc::MessageAllocator< ::brokersilo::DiffieHellmanRg, ::brokersilo::DiffieHellmanRg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brokersilo::DiffieHellmanRg, ::brokersilo::DiffieHellmanRg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRandom(::grpc::ServerContext* /*context*/, const ::brokersilo::DiffieHellmanRg* /*request*/, ::brokersilo::DiffieHellmanRg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRandom(
      ::grpc::CallbackServerContext* /*context*/, const ::brokersilo::DiffieHellmanRg* /*request*/, ::brokersilo::DiffieHellmanRg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_evaluateK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_evaluateK() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::brokersilo::knnQuery, ::brokersilo::EncryptData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brokersilo::knnQuery* request, ::brokersilo::EncryptData* response) { return this->evaluateK(context, request, response); }));}
    void SetMessageAllocatorFor_evaluateK(
        ::grpc::MessageAllocator< ::brokersilo::knnQuery, ::brokersilo::EncryptData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brokersilo::knnQuery, ::brokersilo::EncryptData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_evaluateK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status evaluateK(::grpc::ServerContext* /*context*/, const ::brokersilo::knnQuery* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* evaluateK(
      ::grpc::CallbackServerContext* /*context*/, const ::brokersilo::knnQuery* /*request*/, ::brokersilo::EncryptData* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_requestInterval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_requestInterval() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::brokersilo::EncryptData, ::brokersilo::EncryptData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response) { return this->requestInterval(context, request, response); }));}
    void SetMessageAllocatorFor_requestInterval(
        ::grpc::MessageAllocator< ::brokersilo::EncryptData, ::brokersilo::EncryptData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brokersilo::EncryptData, ::brokersilo::EncryptData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_requestInterval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestInterval(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* requestInterval(
      ::grpc::CallbackServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendRange() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::brokersilo::EncryptData, ::brokersilo::EncryptData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response) { return this->sendRange(context, request, response); }));}
    void SetMessageAllocatorFor_sendRange(
        ::grpc::MessageAllocator< ::brokersilo::EncryptData, ::brokersilo::EncryptData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brokersilo::EncryptData, ::brokersilo::EncryptData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRange(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendRange(
      ::grpc::CallbackServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_sendNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_sendNumber() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::brokersilo::Number, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::brokersilo::Number* request, ::google::protobuf::Empty* response) { return this->sendNumber(context, request, response); }));}
    void SetMessageAllocatorFor_sendNumber(
        ::grpc::MessageAllocator< ::brokersilo::Number, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::brokersilo::Number, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_sendNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendNumber(::grpc::ServerContext* /*context*/, const ::brokersilo::Number* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::brokersilo::Number* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getAns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getAns() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::Empty, ::brokersilo::Vector>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request) { return this->getAns(context, request); }));
    }
    ~WithCallbackMethod_getAns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAns(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::brokersilo::Vector>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::brokersilo::Vector>* getAns(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetParams<WithCallbackMethod_GetRandom<WithCallbackMethod_evaluateK<WithCallbackMethod_requestInterval<WithCallbackMethod_sendRange<WithCallbackMethod_sendNumber<WithCallbackMethod_getAns<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetParams() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParams(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::brokersilo::DiffieHellmanParams* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRandom() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRandom(::grpc::ServerContext* /*context*/, const ::brokersilo::DiffieHellmanRg* /*request*/, ::brokersilo::DiffieHellmanRg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_evaluateK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_evaluateK() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_evaluateK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status evaluateK(::grpc::ServerContext* /*context*/, const ::brokersilo::knnQuery* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_requestInterval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_requestInterval() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_requestInterval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestInterval(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendRange() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_sendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRange(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_sendNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_sendNumber() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_sendNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendNumber(::grpc::ServerContext* /*context*/, const ::brokersilo::Number* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getAns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getAns() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_getAns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAns(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::brokersilo::Vector>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetParams() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParams(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::brokersilo::DiffieHellmanParams* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRandom() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRandom(::grpc::ServerContext* /*context*/, const ::brokersilo::DiffieHellmanRg* /*request*/, ::brokersilo::DiffieHellmanRg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRandom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_evaluateK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_evaluateK() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_evaluateK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status evaluateK(::grpc::ServerContext* /*context*/, const ::brokersilo::knnQuery* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestevaluateK(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_requestInterval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_requestInterval() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_requestInterval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestInterval(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestrequestInterval(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendRange() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_sendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRange(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendRange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_sendNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_sendNumber() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_sendNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendNumber(::grpc::ServerContext* /*context*/, const ::brokersilo::Number* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsendNumber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getAns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getAns() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_getAns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAns(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::brokersilo::Vector>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetAns(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetParams() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetParams(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::brokersilo::DiffieHellmanParams* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRandom() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRandom(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRandom(::grpc::ServerContext* /*context*/, const ::brokersilo::DiffieHellmanRg* /*request*/, ::brokersilo::DiffieHellmanRg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRandom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_evaluateK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_evaluateK() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->evaluateK(context, request, response); }));
    }
    ~WithRawCallbackMethod_evaluateK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status evaluateK(::grpc::ServerContext* /*context*/, const ::brokersilo::knnQuery* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* evaluateK(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_requestInterval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_requestInterval() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->requestInterval(context, request, response); }));
    }
    ~WithRawCallbackMethod_requestInterval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status requestInterval(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* requestInterval(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendRange() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendRange(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendRange(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendRange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_sendNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_sendNumber() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->sendNumber(context, request, response); }));
    }
    ~WithRawCallbackMethod_sendNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status sendNumber(::grpc::ServerContext* /*context*/, const ::brokersilo::Number* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* sendNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getAns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getAns() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->getAns(context, request); }));
    }
    ~WithRawCallbackMethod_getAns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getAns(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::brokersilo::Vector>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* getAns(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetParams() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::brokersilo::DiffieHellmanParams>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::brokersilo::DiffieHellmanParams>* streamer) {
                       return this->StreamedGetParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetParams(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::brokersilo::DiffieHellmanParams* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::brokersilo::DiffieHellmanParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRandom() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brokersilo::DiffieHellmanRg, ::brokersilo::DiffieHellmanRg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brokersilo::DiffieHellmanRg, ::brokersilo::DiffieHellmanRg>* streamer) {
                       return this->StreamedGetRandom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRandom(::grpc::ServerContext* /*context*/, const ::brokersilo::DiffieHellmanRg* /*request*/, ::brokersilo::DiffieHellmanRg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRandom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brokersilo::DiffieHellmanRg,::brokersilo::DiffieHellmanRg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_evaluateK : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_evaluateK() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brokersilo::knnQuery, ::brokersilo::EncryptData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brokersilo::knnQuery, ::brokersilo::EncryptData>* streamer) {
                       return this->StreamedevaluateK(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_evaluateK() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status evaluateK(::grpc::ServerContext* /*context*/, const ::brokersilo::knnQuery* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedevaluateK(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brokersilo::knnQuery,::brokersilo::EncryptData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_requestInterval : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_requestInterval() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brokersilo::EncryptData, ::brokersilo::EncryptData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brokersilo::EncryptData, ::brokersilo::EncryptData>* streamer) {
                       return this->StreamedrequestInterval(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_requestInterval() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status requestInterval(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedrequestInterval(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brokersilo::EncryptData,::brokersilo::EncryptData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendRange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendRange() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brokersilo::EncryptData, ::brokersilo::EncryptData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brokersilo::EncryptData, ::brokersilo::EncryptData>* streamer) {
                       return this->StreamedsendRange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendRange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendRange(::grpc::ServerContext* /*context*/, const ::brokersilo::EncryptData* /*request*/, ::brokersilo::EncryptData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendRange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brokersilo::EncryptData,::brokersilo::EncryptData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_sendNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_sendNumber() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::brokersilo::Number, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::brokersilo::Number, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedsendNumber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_sendNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status sendNumber(::grpc::ServerContext* /*context*/, const ::brokersilo::Number* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsendNumber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::brokersilo::Number,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetParams<WithStreamedUnaryMethod_GetRandom<WithStreamedUnaryMethod_evaluateK<WithStreamedUnaryMethod_requestInterval<WithStreamedUnaryMethod_sendRange<WithStreamedUnaryMethod_sendNumber<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_getAns : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_getAns() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::Empty, ::brokersilo::Vector>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::Empty, ::brokersilo::Vector>* streamer) {
                       return this->StreamedgetAns(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_getAns() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getAns(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::grpc::ServerWriter< ::brokersilo::Vector>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedgetAns(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::Empty,::brokersilo::Vector>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_getAns<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetParams<WithStreamedUnaryMethod_GetRandom<WithStreamedUnaryMethod_evaluateK<WithStreamedUnaryMethod_requestInterval<WithStreamedUnaryMethod_sendRange<WithStreamedUnaryMethod_sendNumber<WithSplitStreamingMethod_getAns<Service > > > > > > > StreamedService;
};

}  // namespace brokersilo


#endif  // GRPC_BrokerSilo_2eproto__INCLUDED
