// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: BrokerSilo.proto

#include "BrokerSilo.pb.h"
#include "BrokerSilo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace brokersilo {

static const char* BrokerSilo_method_names[] = {
  "/brokersilo.BrokerSilo/GetParams",
  "/brokersilo.BrokerSilo/GetRandom",
  "/brokersilo.BrokerSilo/evaluateK",
  "/brokersilo.BrokerSilo/requestInterval",
  "/brokersilo.BrokerSilo/sendRange",
  "/brokersilo.BrokerSilo/sendNumber",
  "/brokersilo.BrokerSilo/getAns",
};

std::unique_ptr< BrokerSilo::Stub> BrokerSilo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BrokerSilo::Stub> stub(new BrokerSilo::Stub(channel, options));
  return stub;
}

BrokerSilo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetParams_(BrokerSilo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRandom_(BrokerSilo_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_evaluateK_(BrokerSilo_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_requestInterval_(BrokerSilo_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendRange_(BrokerSilo_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_sendNumber_(BrokerSilo_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getAns_(BrokerSilo_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status BrokerSilo::Stub::GetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::brokersilo::DiffieHellmanParams* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::brokersilo::DiffieHellmanParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetParams_, context, request, response);
}

void BrokerSilo::Stub::async::GetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::brokersilo::DiffieHellmanParams* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::brokersilo::DiffieHellmanParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetParams_, context, request, response, std::move(f));
}

void BrokerSilo::Stub::async::GetParams(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::brokersilo::DiffieHellmanParams* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanParams>* BrokerSilo::Stub::PrepareAsyncGetParamsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brokersilo::DiffieHellmanParams, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanParams>* BrokerSilo::Stub::AsyncGetParamsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BrokerSilo::Stub::GetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::brokersilo::DiffieHellmanRg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brokersilo::DiffieHellmanRg, ::brokersilo::DiffieHellmanRg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRandom_, context, request, response);
}

void BrokerSilo::Stub::async::GetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg* request, ::brokersilo::DiffieHellmanRg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brokersilo::DiffieHellmanRg, ::brokersilo::DiffieHellmanRg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRandom_, context, request, response, std::move(f));
}

void BrokerSilo::Stub::async::GetRandom(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg* request, ::brokersilo::DiffieHellmanRg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRandom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanRg>* BrokerSilo::Stub::PrepareAsyncGetRandomRaw(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brokersilo::DiffieHellmanRg, ::brokersilo::DiffieHellmanRg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRandom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brokersilo::DiffieHellmanRg>* BrokerSilo::Stub::AsyncGetRandomRaw(::grpc::ClientContext* context, const ::brokersilo::DiffieHellmanRg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRandomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BrokerSilo::Stub::evaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::brokersilo::EncryptData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brokersilo::knnQuery, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_evaluateK_, context, request, response);
}

void BrokerSilo::Stub::async::evaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery* request, ::brokersilo::EncryptData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brokersilo::knnQuery, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_evaluateK_, context, request, response, std::move(f));
}

void BrokerSilo::Stub::async::evaluateK(::grpc::ClientContext* context, const ::brokersilo::knnQuery* request, ::brokersilo::EncryptData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_evaluateK_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* BrokerSilo::Stub::PrepareAsyncevaluateKRaw(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brokersilo::EncryptData, ::brokersilo::knnQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_evaluateK_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* BrokerSilo::Stub::AsyncevaluateKRaw(::grpc::ClientContext* context, const ::brokersilo::knnQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncevaluateKRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BrokerSilo::Stub::requestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::brokersilo::EncryptData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brokersilo::EncryptData, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_requestInterval_, context, request, response);
}

void BrokerSilo::Stub::async::requestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brokersilo::EncryptData, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_requestInterval_, context, request, response, std::move(f));
}

void BrokerSilo::Stub::async::requestInterval(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_requestInterval_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* BrokerSilo::Stub::PrepareAsyncrequestIntervalRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brokersilo::EncryptData, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_requestInterval_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* BrokerSilo::Stub::AsyncrequestIntervalRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrequestIntervalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BrokerSilo::Stub::sendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::brokersilo::EncryptData* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brokersilo::EncryptData, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendRange_, context, request, response);
}

void BrokerSilo::Stub::async::sendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brokersilo::EncryptData, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendRange_, context, request, response, std::move(f));
}

void BrokerSilo::Stub::async::sendRange(::grpc::ClientContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendRange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* BrokerSilo::Stub::PrepareAsyncsendRangeRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::brokersilo::EncryptData, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendRange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::brokersilo::EncryptData>* BrokerSilo::Stub::AsyncsendRangeRaw(::grpc::ClientContext* context, const ::brokersilo::EncryptData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendRangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BrokerSilo::Stub::sendNumber(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::brokersilo::Number, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_sendNumber_, context, request, response);
}

void BrokerSilo::Stub::async::sendNumber(::grpc::ClientContext* context, const ::brokersilo::Number* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::brokersilo::Number, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendNumber_, context, request, response, std::move(f));
}

void BrokerSilo::Stub::async::sendNumber(::grpc::ClientContext* context, const ::brokersilo::Number* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_sendNumber_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* BrokerSilo::Stub::PrepareAsyncsendNumberRaw(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::brokersilo::Number, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_sendNumber_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* BrokerSilo::Stub::AsyncsendNumberRaw(::grpc::ClientContext* context, const ::brokersilo::Number& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsendNumberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::brokersilo::Vector>* BrokerSilo::Stub::getAnsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::brokersilo::Vector>::Create(channel_.get(), rpcmethod_getAns_, context, request);
}

void BrokerSilo::Stub::async::getAns(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::grpc::ClientReadReactor< ::brokersilo::Vector>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::brokersilo::Vector>::Create(stub_->channel_.get(), stub_->rpcmethod_getAns_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::brokersilo::Vector>* BrokerSilo::Stub::AsyncgetAnsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::brokersilo::Vector>::Create(channel_.get(), cq, rpcmethod_getAns_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::brokersilo::Vector>* BrokerSilo::Stub::PrepareAsyncgetAnsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::brokersilo::Vector>::Create(channel_.get(), cq, rpcmethod_getAns_, context, request, false, nullptr);
}

BrokerSilo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BrokerSilo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BrokerSilo::Service, ::google::protobuf::Empty, ::brokersilo::DiffieHellmanParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BrokerSilo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::brokersilo::DiffieHellmanParams* resp) {
               return service->GetParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BrokerSilo_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BrokerSilo::Service, ::brokersilo::DiffieHellmanRg, ::brokersilo::DiffieHellmanRg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BrokerSilo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brokersilo::DiffieHellmanRg* req,
             ::brokersilo::DiffieHellmanRg* resp) {
               return service->GetRandom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BrokerSilo_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BrokerSilo::Service, ::brokersilo::knnQuery, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BrokerSilo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brokersilo::knnQuery* req,
             ::brokersilo::EncryptData* resp) {
               return service->evaluateK(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BrokerSilo_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BrokerSilo::Service, ::brokersilo::EncryptData, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BrokerSilo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brokersilo::EncryptData* req,
             ::brokersilo::EncryptData* resp) {
               return service->requestInterval(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BrokerSilo_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BrokerSilo::Service, ::brokersilo::EncryptData, ::brokersilo::EncryptData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BrokerSilo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brokersilo::EncryptData* req,
             ::brokersilo::EncryptData* resp) {
               return service->sendRange(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BrokerSilo_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BrokerSilo::Service, ::brokersilo::Number, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BrokerSilo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::brokersilo::Number* req,
             ::google::protobuf::Empty* resp) {
               return service->sendNumber(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BrokerSilo_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< BrokerSilo::Service, ::google::protobuf::Empty, ::brokersilo::Vector>(
          [](BrokerSilo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::grpc::ServerWriter<::brokersilo::Vector>* writer) {
               return service->getAns(ctx, req, writer);
             }, this)));
}

BrokerSilo::Service::~Service() {
}

::grpc::Status BrokerSilo::Service::GetParams(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::brokersilo::DiffieHellmanParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BrokerSilo::Service::GetRandom(::grpc::ServerContext* context, const ::brokersilo::DiffieHellmanRg* request, ::brokersilo::DiffieHellmanRg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BrokerSilo::Service::evaluateK(::grpc::ServerContext* context, const ::brokersilo::knnQuery* request, ::brokersilo::EncryptData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BrokerSilo::Service::requestInterval(::grpc::ServerContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BrokerSilo::Service::sendRange(::grpc::ServerContext* context, const ::brokersilo::EncryptData* request, ::brokersilo::EncryptData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BrokerSilo::Service::sendNumber(::grpc::ServerContext* context, const ::brokersilo::Number* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BrokerSilo::Service::getAns(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::grpc::ServerWriter< ::brokersilo::Vector>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace brokersilo

